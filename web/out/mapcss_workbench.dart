// Auto-generated from workbench.html.
// DO NOT EDIT.

library workbench;

import 'dart:html' as autogenerated_html;
import 'dart:web_audio' as autogenerated_audio;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;

import 'dart:html';

import 'package:dartlr/dartlr_client.dart';

import 'package:mapcss/mapcss.dart';

import 'package:js/js.dart' as js;

import 'package:web_ui/watcher.dart';

import 'parsing_result.dart';


// Original code
var editor;

const defaultContent = """/*
* sample MapCSS stylesheet
*/
way[highway=residential] {
  line-color: red;
  line-width: 5pt;
}
""";

initEditor() {
  js.scoped(() {
    var te = new Element.tag("textarea");
    te.id = "editor";
    query("#editor-frame").append(te);
    editor = js.$experimentalFunctionProxy(js.context.CodeMirror).fromTextArea(
        te,
        js.map({          
          "theme": "mapcss",
          "lineNumbers": true,
          "autofocus":  true
        })
    );
    editor.setValue(defaultContent);
    js.retain(editor);
  });
}

onParse() {
  js.scoped(() {
    var stream = new  ANTLRStringStream(editor.getValue());
    var parser = new MapCSSParser(
        new CommonTokenStream(new MapCSSLexer(stream))
    );     
    var ret = parser.stylesheet();
    var view = query("#status").xtag;
    if (parser.errors.isEmpty) {
      view.renderOK();
    } else {
      view.renderParseErrors(parser.errors);
    }
    dispatch();
  });  
}

main() {
  initEditor();
  query("#btnParse").on.click.add((_) => onParse());
  
  window.setTimeout(() {
    query("#status").xtag.editor = editor;
  }, 0);
}



// Additional generated code
/** Create the views and bind them to models. */
void init_autogenerated() {
  var _root = autogenerated_html.document.body;
  autogenerated_html.DivElement __editorFrame;
  
  autogenerated_html.ButtonElement __btnParse;
  
  autogenerated_html.UnknownElement __status;
  


  // Initialize fields.
  __editorFrame = _root.query('#editor-frame');
  __btnParse = _root.query('#btnParse');
  __status = _root.query('#status');
  new ParsingResult.forElement(__status)
  ..created_autogenerated()
  ..created()
  ..composeChildren();
  

  // Attach model to views.
  __status.xtag..inserted()
  
  ..inserted_autogenerated();
  

}
